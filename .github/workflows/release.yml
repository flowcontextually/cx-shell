name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  # ====================================================================
  # JOB 1: Run Tests (The Gatekeeper)
  # ====================================================================
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Create and activate virtual environment
        run: |
          uv venv
          source .venv/bin/activate
      - name: Install dependencies
        run: uv pip install -e .[all]

      - name: Run Pytest
        run: pytest

  # ====================================================================
  # JOB 2: Build Executables for All Platforms
  # ====================================================================
  build:
    name: Build Executable on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      # Each job is a clean machine, so we must create the venv here too.
      - name: Create and activate virtual environment
        # The activation command is different on Windows
        shell: bash
        run: |
          uv venv
          if [ "$RUNNER_OS" == "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
      - name: Install dependencies and build tools
        run: uv pip install -e .[all]

      - name: Build the executable with PyInstaller
        run: pyinstaller cx.spec

      - name: Prepare artifact name and path
        id: prepare_artifact
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          OS_NAME=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')

          if [ "${{ runner.os }}" == "Windows" ]; then
            EXECUTABLE_PATH="dist/cx.exe"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-amd64.zip"
            7z a $ARCHIVE_NAME $EXECUTABLE_PATH
            echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
            echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          else
            EXECUTABLE_PATH="dist/cx"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-x86_64.tar.gz"
            tar -czvf $ARCHIVE_NAME -C dist cx
            echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
            echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          fi

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  # ====================================================================
  # JOB 3: Create the GitHub Release and Upload Assets
  # ====================================================================
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/**/*
