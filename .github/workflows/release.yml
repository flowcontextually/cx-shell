name: Build and Release CX Shell

# This workflow is triggered ONLY when a new tag is pushed.
# Tags should follow semantic versioning, e.g., v0.1.0, v0.2.1, etc.
on:
  push:
    tags:
      - "v*"

jobs:
  # ====================================================================
  # JOB 1: Run Tests (The Gatekeeper)
  # This job ensures that no broken code is ever released.
  # ====================================================================
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv pip install -e .[all]

      - name: Run Pytest
        run: pytest

  # ====================================================================
  # JOB 2: Build Executables for All Platforms
  # This job runs in parallel for each OS after the tests have passed.
  # ====================================================================
  build:
    name: Build Executable on ${{ matrix.os }}
    needs: test # This job depends on the 'test' job succeeding
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv and build dependencies
        run: |
          pip install uv
          uv pip install -e .[all]

      - name: Build the executable with PyInstaller
        run: pyinstaller cx.spec

      - name: Prepare artifact name and path
        id: prepare_artifact
        shell: bash
        run: |
          # The release tag (e.g., "v0.1.0") is available in github.ref_name
          VERSION=${{ github.ref_name }}
          OS_NAME=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')

          if [ "${{ runner.os }}" == "Windows" ]; then
            EXECUTABLE_PATH="dist/cx.exe"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-amd64.zip"
            # Use 7z on Windows runners for creating zip files
            7z a $ARCHIVE_NAME $EXECUTABLE_PATH
            echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
            echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          else
            EXECUTABLE_PATH="dist/cx"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-x86_64.tar.gz"
            tar -czvf $ARCHIVE_NAME -C dist cx
            echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
            echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          fi

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  # ====================================================================
  # JOB 3: Create the GitHub Release and Upload Assets
  # This job runs only after all builds have successfully completed.
  # ====================================================================
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create the release and upload assets
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          # This will automatically use the tag name and commit message for the release notes
          # You can edit them later.
          files: release-assets/**/*
