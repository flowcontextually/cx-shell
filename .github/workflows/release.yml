# /.github/workflows/release.yml

name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Create virtual environment
        run: uv venv
      - name: Install dependencies
        run: uv pip install -e .[all]
      - name: Run Pytest
        run: uv run pytest

  build:
    name: Build Executable on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (macOS & Windows)
        if: runner.os != 'Linux'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies and build (macOS & Windows)
        if: runner.os != 'Linux'
        run: |
          pip install uv
          uv venv
          uv pip install -e .[all]
          uv run pyinstaller cx.spec

      - name: Build for Linux using Docker
        if: runner.os == 'Linux'
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work python:3.12-slim-bullseye \
            bash -c "apt-get update && apt-get install -y git binutils && pip install uv && uv venv && uv pip install -e .[all] && uv run pyinstaller cx.spec"

      - name: Prepare and Archive Executable
        id: prepare_artifact
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          OS_NAME=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')

          if [ "${{ runner.os }}" == "Windows" ]; then
            EXECUTABLE_PATH="dist/cx.exe"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-amd64.zip"
            # Use PowerShell's built-in compression, which is guaranteed to be on Windows runners.
            powershell -Command "Compress-Archive -Path '${EXECUTABLE_PATH}' -DestinationPath '${ARCHIVE_NAME}'"
          else
            EXECUTABLE_PATH="dist/cx"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-x86_64.tar.gz"
            # The -C flag tells tar to change to the 'dist' directory before archiving,
            # which ensures 'cx' is at the root of the tarball.
            tar -czvf ${ARCHIVE_NAME} -C dist cx
          fi

          # Set the output for the next step
          echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/**/*
