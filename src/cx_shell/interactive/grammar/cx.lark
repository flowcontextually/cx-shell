?start: expression

expression: pipeline
// THIS IS THE FIX: A pipeline is one command_unit, optionally followed by more.
// This structure ensures the VBAR token is consumed by the rule, not passed to the transformer.
pipeline: command_unit (VBAR command_unit)*

command_unit: executable formatter?

executable: assignment | single_executable | "(" expression ")"
assignment: CNAME "=" expression

single_executable: single_command | variable_lookup

single_command: dot_notation_kw_action
              | dot_notation_pos_action
              | builtin_command

formatter: formatter_option+
formatter_option: output_option | columns_option | query_option
output_option: "--cx-output" ARG
columns_option: "--cx-columns" column_list
query_option: "--cx-query" STRING
column_list: CNAME ("," CNAME)*


# --- (The rest of the grammar from builtin_command downwards is now correct and remains unchanged) ---
builtin_command: connections_command | help_command | inspect_command | connect_command | session_command | variable_command | flow_command | query_command | script_command | connection_command | open_command | app_command | agent_command | process_command | compile_command
dot_notation_kw_action: CNAME "." CNAME "(" [arguments] ")"
dot_notation_pos_action: CNAME "." CNAME "(" STRING ")"
connect_command: "connect" ARG "--as" ARG
connections_command: "connections"
help_command: "help"
inspect_command: "inspect" ARG
agent_command: "agent" STRING
variable_lookup: CNAME
session_command: "session" session_subcommand
session_subcommand: "list" -> session_list | "status" -> session_status | "save" ARG -> session_save | "load" ARG -> session_load | "rm" ARG -> session_rm
variable_command: ("var" | "vars") variable_subcommand
variable_subcommand: "list" -> variable_list | "rm" ARG -> variable_rm
flow_command: "flow" flow_subcommand
flow_subcommand: "list" -> flow_list | "run" "--name" ARG kv_pair* -> flow_run
query_command: "query" query_subcommand
query_subcommand: "list" -> query_list | "run" "--on" ARG "--name" ARG kv_pair* -> query_run
script_command: "script" script_subcommand
script_subcommand: "list" -> script_list | "run" "--name" ARG kv_pair* -> script_run
connection_command: "connection" connection_subcommand
connection_subcommand: "list" -> connection_list | "create" command_args? -> connection_create
open_command: "open" (JINJA_BLOCK | ARG) [ARG] command_args? -> open_command_with_args
app_command: "app" app_subcommand
app_subcommand: "list" -> app_list | "install" command_args -> app_install | "uninstall" ARG -> app_uninstall | "sync" -> app_sync | "package" ARG -> app_package | "search" [ARG] -> app_search
compile_command: "compile" command_args -> compile_command_with_args
process_command: "process" process_subcommand
process_subcommand: "list" -> process_list | "logs" ARG ["--follow"] -> process_logs | "stop" ARG -> process_stop
arguments: (kw_argument ("," kw_argument)*)
kw_argument: CNAME "=" value
kv_pair: CNAME "=" value
command_args: named_argument+
named_argument: FLAG (STRING | ARG)
FLAG.1: /--[a-zA-Z0-9_-]+/
ARG: /[\/a-zA-Z0-9_:\-.~+@]+/
JINJA_BLOCK: /\{\{.*?\}\}/
STRING : /(\".*?\"|\'.*?\')/
VBAR: "|"
%import common.SIGNED_NUMBER -> NUMBER
%import common.CNAME
%import common.WS
%ignore WS
value: STRING | NUMBER | "true" -> true | "false" -> false | "null" -> null | CNAME | JINJA_BLOCK